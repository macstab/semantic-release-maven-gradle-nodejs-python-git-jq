name: Docker Image CI

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DEST_DOCKER_IMAGE: macstab/semantic-release-maven-gradle-nodejs-python-git-jq

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Step 2: Check commit message
      - name: Check commit message
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        id: check_commit
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.event.after }})
          if [[ "$commit_message" =~ "^chore(release):.*" ]]; then
            echo "::set-output name=skip::true"
          else
            echo "::set-output name=skip::false"
          fi

      # Step 3: Set up Docker Build
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3
        if: steps.check_commit.outputs.skip == 'false'

      # Step 4: Login to DockerHub (if not a tag)
      - name: Login to DockerHub
        if: ${{ steps.check_commit.outputs.skip == 'false' && !startsWith(github.ref, 'refs/tags/') }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Step 5: Build docker image for test only (if not a tag)
      - name: Build docker image for test only
        if: ${{ steps.check_commit.outputs.skip == 'false' && !startsWith(github.ref, 'refs/tags/') }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.DEST_DOCKER_IMAGE }}:v1.6.2
          load: true

      # Step 6: Checkout code again with a bot token
      - name: Checkout code with bot token
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}

      # Step 7: Semantic Release (only on main branch)
      - name: Semantic Release
        if: steps.check_commit.outputs.skip == 'false' && github.ref == 'refs/heads/main'
        id: semantic_release
        uses: docker://macstab/semantic-release-maven-gradle-nodejs-python-git-jq:v1.6.2
        with:
          entrypoint: /bin/sh
          workdir: /home/runner/work/${{ github.repository }}/${{ github.repository }}
          branches: 'main'
          args: -c "cp /configs/$CONFIG_FILE .releaserc && git config --global --add safe.directory /github/workspace && npx semantic-release --branches $RELEASE_BRANCH"
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_ENV: production
          GH_URL: https://github.com/${{ github.repository }}.git
          RELEASE_BRANCH: main
          CONFIG_FILE: .releaserc-docker.json
          DEBUG: semantic-release:*

      # Step 8: Get latest release (only on main branch)
      - name: Get latest release
        if: steps.check_commit.outputs.skip == 'false' && github.ref == 'refs/heads/main'
        id: latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 9: Merge main branch into develop branch (on tag event)
      - name: Merge main -> develop
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: docker://macstab/semantic-release-maven-gradle-nodejs-python-git-jq:v1.6.2
        with:
          entrypoint: /bin/sh
          workdir: /home/runner/work/${{ github.repository }}/${{ github.repository }}
          args: "-c \"set -x && git config --global --add safe.directory /github/workspace && git config --global user.email '${{ secrets.BOT_USER_EMAIL }}' && git config --global user.name '${{ secrets.BOT_USER_NAME }}' && git fetch -a origin && git checkout ${INPUT_TARGET_BRANCH} && git pull && git merge --no-ff -m 'chore(release): ${GITHUB_REF#refs/tags/} merge main to develop' ${INPUT_FROM_BRANCH} && git push\""
        env:
          INPUT_FROM_BRANCH: 'origin/main'
          INPUT_TARGET_BRANCH: 'origin/develop'

      # Step 10: Build and push docker image (only on main branch)
      - name: Build and push docker image
        if: steps.check_commit.outputs.skip == 'false' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DEST_DOCKER_IMAGE }}:${{ fromJson(steps.latest_release.outputs.data).tag_name }}

      # Step 11: Push to develop-hash tag (only on develop branch)
      - name: Push to develop-hash tag
        if: steps.check_commit.outputs.skip == 'false' && github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DEST_DOCKER_IMAGE }}:develop-${{ github.sha }}
